'' =================================================================================================''''   File....... jm_analog_out.spin2''   Purpose.... Simple P2 analog output using smart pin''   Author..... Jon "JonnyMac" McPhalen''               Copyright (c) 2020 Jon McPhalen''               -- see below for terms of use''   E-mail..... jon.mcphalen@gmail.com''   Started....''   Updated.... 29 SEP 2020'''' =================================================================================================con { fixed io pins }  RX1      = 63  { I }                                          ' programming / debug  TX1      = 62  { O }  SF_CS    = 61  { O }                                          ' serial flash  SF_SCK   = 60  { O }  SF_SDO   = 59  { O }  SF_SDI   = 58  { I }convar  long  ap                                                      ' analog pin  long  urlo                                                    ' user output range, low  long  urhi                                                    ' user output range, high  long  aout                                                    ' analog out value (in user range)  long  setup                                                   ' true when pin setuppub null()  ' This is not a top-level objectpub start(pin, lo, hi)'' Setup pin for analog input'' -- lo and hi define user range (e.g. 0 and 3300 for millivolts)  stop()  pinstart(pin, P_DAC_DITHER_PWM | P_DAC_990R_3V | P_OE, 256, 0) ' 16-bit dac  pinl(pin)  longmove(@ap, @pin, 3)                                        ' save setup  setup := truepub stop()'' Disable analog smart pin if previously configured  if (setup)    pinclear(ap)                                                ' disable smart pin    longfill(@ap, 0, 4)                                         ' mark disabledpub write(value) : result'' Convert value to 16-bit level and write to DAC  aout := urlo #> value <# urhi                                 ' constrain to user range  result := (aout - urlo) * $FFFF / (urhi - urlo) + urlo        ' convert to 16-bit dac value  wypin(ap, result)pub level() : result'' Return last user level written to analog output  return aoutcon { license }{{  Terms of Use: MIT License  Permission is hereby granted, free of charge, to any person obtaining a copy of this  software and associated documentation files (the "Software"), to deal in the Software  without restriction, including without limitation the rights to use, copy, modify,  merge, publish, distribute, sublicense, and/or sell copies of the Software, and to  permit persons to whom the Software is furnished to do so, subject to the following  conditions:  The above copyright notice and this permission notice shall be included in all copies  or substantial portions of the Software.  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,  INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A  PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF  CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE  OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.}}